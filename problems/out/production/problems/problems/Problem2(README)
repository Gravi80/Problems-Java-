For example if we have two strings:

Please, peter go swimming!

and

I’m peter goliswi

The algorithm should print out ‘ peter go’.

To understand the algorithm you just need to fill the entries of an integer-array with the lengths of the
identical substrings.

Assume we use
i for the horizontal string (please …) and
j for the vertical string.

Then the algorithm hits at some time i=19 and j=0 for one identical character ‘i’.
Then the line  num[i][j] = 1;
is executed and saves the lengths of the 1 length identical substring.

 1    please, peter go swimming
 2  i 0000000000000000000100100
 3  ' 0000000000000000000000000
 4  m 0000000000000000000011000
 5    0000000100000100100000000
 6  p 1000000020000000000000000
 7  e 0010010003000000000000000
 8  t 0000000000400000000000000
 9  e 0010010001050000000000000
 10 r 0000000000006000000000000
 11   0000000100000700100000000
 12 g 0000000000000080000000000
 13 o 0000000000000009000000000
 14 l 0100000000000000000000000
 15 i 0000000000000000000100100
 16 s 0001000000000000010000000
 17 w 0000000000000000002000000
 18 i 0000000000000000000300100


Later on it hits the m characters and saves 1 two times to the array but then at i=7 and j=3 it starts our substring
and saves 1 for the space character. Then some loops later it reaches i=8 and j=4
Now it reuses the already calculated “identical-length” of 1. It will do:

num[8][4] = 1 + num[7][3];
and we get 2. So, we now know we have a substring with two 2 characters. And with

if (num[i][j] > maxlen)
we make sure that we overwrite the existing longest substring (stored in the StringBuilder) ONLY IF there is a longer
substring found and either append the character (if it is the current substring in progress):

sb.append(str1.charAt(i));
or we can start a longer substring.





A simple solution is to one by one consider all substrings of first string and for every substring check if it is a
substring in second string.
Keep track of the maximum length substring.
There will be O(m^2) substrings and we can find whether a string is subsring on another string in O(n) time (See this).
So overall time complexity of this method would be O(n * m2)

Dynamic Programming can be used to find the longest common substring in O(m*n) time.
The idea is to find length of the longest common suffix for all substrings of both strings and store these lengths
in a table.


The longest common suffix has following optimal substructure property
   LCSuff(X, Y, m, n) = LCSuff(X, Y, m-1, n-1) + 1 if X[m-1] = Y[n-1]
                        0  Otherwise (if X[m-1] != Y[n-1])

The maximum length Longest Common Suffix is the longest common substring.
   LCSubStr(X, Y, m, n)  = Max(LCSuff(X, Y, i, j)) where 1 <= i <= m
                                                     and 1 <= j <= n
